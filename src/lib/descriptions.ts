
export const operatorDescriptions: Record<string, string> = {
  map: "Transform each value with a projection function.",
  filter: "Pass only values that match a predicate.",
  scan: "Accumulate state and emit each step (like reduce over time).",
  toArray: "Collect all values into a single array on completion.",
  switchMap: "Map to an inner and switch to the latest (cancel previous).",
  mergeMap: "Map to inners and merge concurrently.",
  concatMap: "Map to inners and queue them (one at a time, ordered).",
  exhaustMap: "Map to an inner; ignore new triggers while itâ€™s active.",
  debounceTime: "Emit after a quiet period with no new values.",
  throttleTime: "Emit then ignore values for a fixed duration (optional trailing).",
  sampleTime: "Emit the latest value at fixed time intervals.",
  delay: "Delay each emission by a fixed time.",
  debounce: "Emit after the duration Observable indicates quiet.",
  throttle: "Emit then ignore until the duration Observable fires.",
  sample: "Emit the latest value when the notifier ticks.",
  delayWhen: "Delay each emission until its notifier emits.",
}
export const furtherDescriptions: Record<string, string> = {
  "projection": "Transform each value with a function.",
  "filter": "Allow only values that pass a predicate.",
  "stateful": "Maintain rolling state across emissions.",
  "collect": "Accumulate into an array on completion.",
  "switch": "Switch to the latest inner (cancel previous).",
  "merge": "Merge multiple inners concurrently.",
  "queue (concat)": "Queue inner streams, one at a time.",
  "exhaust": "Ignore new triggers while an inner is active.",
  "quiet-period": "Emit after silence for a fixed time.",
  "leading throttle": "Emit then silence for a fixed time.",
  "clocked sampling": "Emit latest value at fixed intervals.",
  "delay": "Shift emissions into the future.",
  "quiet-period (notifier)": "Emit after a notifier-defined quiet period.",
  "leading (notifier)": "Emit then silence until notifier fires.",
  "sampling (notifier)": "Emit latest whenever notifier ticks.",
  "delay (notifier)": "Defer each value until its notifier fires.",
}
